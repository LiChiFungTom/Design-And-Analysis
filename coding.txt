1. what is the GCD(original) python code and Pseudo-code?
    

    Python code:
    def gcd(a,b):
        while a!=b:
            if a > b:
                a = a - b
            else:
                b= b - a
        return a

    Pseudo-code:
        gcd(a,b):
            while a =/ b:
                if a > b:
                    a = a - b
                else:
                    b = b - a
            return a

2. what is the improved of GCD python code?
    def gcd2(a,b):
        if a < b :
            a,b = b,a
        while a%b > 0 :
            a,b = b,a %b
        return b

3. Huffman code 
while length of node list h >= 2:
    get index ind1 of node with the lowest freq
    left = h[ind1]
    delete this node

    get index ind2 of node with the 2nd lowest freq
    right = h[ind2]
    delete this node
    
    create the last node by merging left and right,
	summing up their freq and append last to h 

4. Huffman code with using a min-Heap
while length of node list h >= 2:
    pop an element left from min-Heap of h
    pop an element right from min-Heap of h

    create the last node by merging left and right,
    push last to the min-Heap of h 

5. Finding the maximum of n numbers
    Pseudo-code:
        max([a1, a2, …, an]):                               T(n)
            if n = 1:                                       O(1)
                return a1                                   O(1)
            else: 
                m1 = max([a1, a2, …, an/2])                 T(n/2)
                m2 = max([an/2+1, an/2+2, …, an])           T(n/2)
                compare m1, m2 and return the larger one    O(1)

6. MergeSort:
    sort([a1, a2, …, an]):
        if n = 1:
            return [a1]
        else: 
            S1 = sort([a1, a2, …, an/2])
            S2 = sort([an/2+1, an/2+2, …, an])
            merge S1, S2 into a single sorted list

7. QuickSort:
    quicksort([a1, a2, …, an]):
        if n = 1: return
        else:
            pIndex = partition([a1, a2, …, an])
            if pIndex > 1:
                quicksort([a1’, a2’, …, apIndex-1’])
            if pIndex < n:
                quicksort([apIndex+1’, apIndex+2’, …, an’])        

8. The algorithm
    largest(N, k):                                  T(n)
        Pick some number a in N arbitrarily.        O(1)
        Divide N into                           
        L = {x |x ≥ a} and S = {x | x < a}.         O(n)
        if |L| = k: return a                        O(1)
        if |L| > k: return largest(L-{a}, k)        T(|L- { a } |)
        if |L| < k: return largest(S, k-|L|)        T(| S |)

        Time complexity: O(n2)

9. def sort5(L):
        "Sort a list L of 5 number in 7 comparisons"
        a,b,c,d,e = L
        if b < a:   a, b = b, a
        if d < c:   c, d = d, c
        if a < c:   a, b, c , d = c, d, a, b

        if e > a:
            if e > b :   pass
            else:   b, e = e, b
        else:
            if e < c: c, a , b , e= e, c, a ,b
            else:       a, b , e = e, a, b
        
        if d < b:
            if d < a: return [c , d ,a ,b ,e]
            else:   return [c, a, d, b, e]
        else:
            if d > e: return [c, a, b, e, d]
            else:     return [c, a, b, d, e]


10. Adjacency matrix:
    def __init__(self, numNodes): 
        self.graph = [] # 2D list
        for i in range(numNodes):
            self.graph.append([0] * numNodes)
        self.numNodes = numNodes
  
    # function to add an edge to graph 
    def addEdge(self,u,v): 
        self.graph[u][v] = 1 
        self.graph[v][u] = 1 

11. Adjacency List:
    class GraphAL: 
    # Constructor 
    def __init__(self, numNodes): 
        # default dictionary to store graph 
        self.graph = defaultdict(list)
        self.numNodes = numNodes 
  
    # function to add an edge to graph 
    def addEdge(self,u,v): 
        self.graph[u].append(v)
        self.graph[v].append(u)

12. Breadth-First Search (BFS) Algorithm

BFS(s): // s is the source vertex

   Mark all vertices u as not visited
   Create a queue Q
        Mark s as visited and enqueue (i.e., add) s to Q
           
        while Q is not empty:
                dequeue (i.e., remove) a vertex u from Q
                print vertex u
                
                for each neighbor i of u:
                    if i is not visited:
                        mark i as visited
                        enqueue i to Q

13. BFS on Adjacency List: Python code
    class GraphAL: 
    # ... 
    def BFS(self, s): 
        visited = [False] * self.numNodes 
  
        queue = [] 
        queue.append(s) 
        visited[s] = True
  
        while queue: 
            u = queue.pop(0) 
            print (u, end = " ") 
            for i in self.graph[u]: 
                if visited[i] == False: 
                    queue.append(i) 
                    visited[i] = True

from graphviz import Digraph
def BFS2(self, s): 
        dist = [None] * self.numNodes # distance from s
        bf_tree = Digraph() # breadth-first tree
        queue = []       
        queue.append(s)     
        dist[s] = 0   
  
        while queue: 
            u = queue.pop(0)      
            print ("(node %d, dist %d)" % (u, dist[u]), end = " ") 
            
            for i in self.graph[u]:    
                if dist[i] == None:
                    bf_tree.addEdge(str(u),str(i))
                    queue.append(i)         
                    dist[i] = dist[u]+1
        print()            
        return bf_tree 

- Time Complexity : O(V+E)

14. BFS on Adjacency Matrix: Python code
    class GraphAM: 
    # ... 
    def BFS(self, s): 
        visited = [False] * self.numNodes   
  
        queue = []        
        queue.append(s)     
        visited[s] = True   
        
        while queue: 
            u = queue.pop(0)     
            print (u, end = " ") 
            for i in range(self.numNodes):  
                if self.graph[u][i] == 1                
                    and visited[i] == False:
                    queue.append(i)         
                    visited[i] = True

- Time complexity = O(V+ V2) = O(V2^2) 

15. Depth-First Search (DFS) Algorithm

    Mark all vertices u as not visited
    DFS(s)

    DFS(x):   
    mark x as visited
    print vertex x
               
    for each neighbor y of x:
        if vertex y is not visited:
            DFS(y)

- Time complexity = O(V+E)

16. DFS on Adjacency List: Python code

    def DFS(self, s):   
    visited = [False] * self.numNodes 
    self.rdfs(s, visited) # Call the recursive function

    def rdfs(self, x, visited): 
        visited[x] = True
        print(x, end = ' ')

        for y in self.graph[x]: 
        if visited[y] == False: #explore unvisited neighbors
            self.rdfs(y, visited)

17. Topological Sort

def TopologicalSort(self): 
    visited = [False] * self.numNodes 
    stack = []
    for s in range(self.numNodes): 
        if visited[s] == False:
            self.rdfs3(s, visited, stack) 
        
    while stack: # print the topologically sorted vertices
        print(stack.pop(), end = ' ')
    print()

def rdfs3(self, x, visited, stack): 
    visited[x] = True # If x is not visited, mark it visited
    for y in self.graph[x]: 
	if visited[y] == False:
          self.rdfs3(y, visited, stack) 
    stack.append(x)
